version: "3.9"

services:
  web_app:
    command: python deploy/uvicorn/uvicorn_run.py
    environment:
      - POSTGRES__HOST=postgres_db
      - POSTGRES__PORT=${POSTGRES__PORT}
      - POSTGRES__NAME=${POSTGRES__NAME}
      - POSTGRES__LOGIN=${POSTGRES__LOGIN}
      - POSTGRES__PASSWORD=${POSTGRES__PASSWORD}

      - USER_IDENTITY_SERVICE__SECRET=${USER_IDENTITY_SERVICE__SECRET}
      - USER_IDENTITY_SERVICE__INITIAL_ADMIN_USER_CREDENTIALS__NAME=${USER_IDENTITY_SERVICE__INITIAL_ADMIN_USER_CREDENTIALS__NAME}
      - USER_IDENTITY_SERVICE__INITIAL_ADMIN_USER_CREDENTIALS__PASSWORD=${USER_IDENTITY_SERVICE__INITIAL_ADMIN_USER_CREDENTIALS__PASSWORD}
    volumes:
      - uvicorn_socket_folder:/usr/uvicorn_socket_folder
      - media:/usr/code/myeshop/media
    container_name: web_app
    depends_on:
      postgres_db:
        condition: service_healthy

  nginx:
    container_name: nginx
    volumes:
      - uvicorn_socket_folder:/usr/uvicorn_socket_folder
      - media:/media
    depends_on:
      - web_app

  loki_read:
    container_name: loki_read
    command: "-config.file=/etc/loki/config.yaml -target=read -config.expand-env=true"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    depends_on:
      - minio

  loki_write:
    container_name: loki_write
    command: "-config.file=/etc/loki/config.yaml -target=write -config.expand-env=true"
    depends_on:
      - minio

  minio:
    container_name: minio
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off

  promtail:
    container_name: promtail
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - nginx

  postgres_db:
    image: postgres:14
    container_name: postgres_db
    environment:
      - POSTGRES_USER=${POSTGRES__LOGIN}
      - POSTGRES_PASSWORD=${POSTGRES__PASSWORD}
      - POSTGRES_DB=${POSTGRES__NAME}
    volumes:
      - postgres_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES__LOGIN}"]
      interval: 1s
      timeout: 3s
      retries: 30

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - "--path.rootfs=/host"
    volumes:
      - "/:/host:ro,rslave"

  prometheus:
    container_name: prometheus
    volumes:
      - prometheus_data:/prometheus

  grafana:
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}

volumes:
  media:
  postgres_db_data:
  prometheus_data:
  grafana_data:
  uvicorn_socket_folder:
  minio_data:
