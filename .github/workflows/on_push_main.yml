name: "on_push_ci"

on:
  push:
    branches: ["main"]

env:
  WORK_BRANCH_NAME: main

jobs:
  build_and_push_to_dockerhub:
    runs-on: ubuntu-latest
    env:
      LAST_GIT_COMMIT_SHA: ${{ github.event.head_commit.id }}

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACESS_TOKEN_FOR_CI_CD }}

      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            nginx_docker_context:
              - 'deploy/nginx/@(prod_build/**|Dockerfile)'
            nginx_sll_certificates_build_docker_context:
              - 'deploy/nginx/@(to_create_ssl_certificates_build/**|Dockerfile)'
            prometheus_docker_context:
              - 'deploy/prometheus/**'
            grafana_docker_context:
              - 'deploy/grafana/**'
            promtail_docker_context:
              - 'deploy/promtail/**'
            minio_docker_context:
              - 'deploy/minio/**'
            loki_docker_context:
              - 'deploy/loki/**'

      - name: Build and push to docker hub web app
        uses: docker/build-push-action@v5
        with:
          push: true
          target: build_for_prod
          tags: >
            rwwwrl/myeshop_web_app:${{ env.WORK_BRANCH_NAME }}_${{ env.LAST_GIT_COMMIT_SHA }} ,
            rwwwrl/myeshop_web_app:${{ env.WORK_BRANCH_NAME }}_latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push to docker hub prometheus
        if: steps.changes.outputs.prometheus_docker_context == 'true'
        uses: docker/build-push-action@v5
        with:
          context: "{{ defaultContext }}:deploy/prometheus"
          push: true
          tags: rwwwrl/myeshop_prometheus:${{ env.WORK_BRANCH_NAME }}_latest

      - name: Build and push to docker hub nginx
        if: steps.changes.outputs.nginx_docker_context == 'true'
        uses: docker/build-push-action@v5
        with:
          context: "{{ defaultContext }}:deploy/nginx"
          target: prod_build
          push: true
          tags: rwwwrl/myeshop_nginx:${{ env.WORK_BRANCH_NAME }}_latest

      - name: Build and push to docker hub nginx_to_create_ssl_certificates_build
        if: steps.changes.outputs.nginx_sll_certificates_build_docker_context == 'true'
        uses: docker/build-push-action@v5
        with:
          context: "{{ defaultContext }}:deploy/nginx"
          target: to_create_ssl_certificates_build
          push: true
          tags: rwwwrl/myeshop_nginx_to_create_ssl_certificates_build:${{ env.WORK_BRANCH_NAME }}_latest

      - name: Build and push to docker hub grafana
        if: steps.changes.outputs.grafana_docker_context == 'true'
        uses: docker/build-push-action@v5
        with:
          context: "{{ defaultContext }}:deploy/grafana"
          push: true
          tags: rwwwrl/myeshop_grafana:${{ env.WORK_BRANCH_NAME }}_latest

      - name: Build and push to docker hub promtail
        if: steps.changes.outputs.promtail_docker_context == 'true'
        uses: docker/build-push-action@v5
        with:
          context: "{{ defaultContext }}:deploy/promtail"
          push: true
          tags: rwwwrl/myeshop_promtail:${{ env.WORK_BRANCH_NAME }}_latest

      - name: Build and push to docker hub minio
        if: steps.changes.outputs.minio_docker_context == 'true'
        uses: docker/build-push-action@v5
        with:
          context: "{{ defaultContext }}:deploy/minio"
          push: true
          tags: rwwwrl/myeshop_minio:${{ env.WORK_BRANCH_NAME }}_latest

      - name: Build and push to docker hub loki
        if: steps.changes.outputs.loki_docker_context == 'true'
        uses: docker/build-push-action@v5
        with:
          context: "{{ defaultContext }}:deploy/loki"
          push: true
          tags: rwwwrl/myeshop_loki:${{ env.WORK_BRANCH_NAME }}_latest

  pull_main_latest_and_restart_server_on_test_machine:
    needs: build_and_push_to_dockerhub
    runs-on: ubuntu-latest

    steps:
      - name: Setup ssh
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY_TO_YANDEX_CLOUD_VM_TEST_STAND }}" > ~/.ssh/yandex-cloud-test-stand.key
          chmod 600 ~/.ssh/yandex-cloud-test-stand.key
          cat >>~/.ssh/config <<END
          Host yandex-cloud-test-stand
            HostName ${{ secrets.YANDEX_CLOUD_VM_TEST_STAND_PUBLIC_IP }}
            User ${{ secrets.YANDEX_CLOUD_VM_TEST_STAND_USER_USERNAME }}
            IdentityFile ~/.ssh/yandex-cloud-test-stand.key
            StrictHostKeyChecking no
          END

      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            test_app_migrations_files:
              - 'eshop/apps/test_app/test_app/migrations/versions/*.py'
            user_identity_migrations_files:
              - 'eshop/apps/user_identity/user_identity/migrations/versions/*.py'
            basket_migrations_files:
              - 'eshop/apps/basket/basket/migrations/versions/*.py'
            catalog_migrations_files:
              - 'eshop/apps/catalog/catalog/migrations/versions/*.py'

      - name: Stop current running server
        run: ssh yandex-cloud-test-stand "cd ~/projects/my_eshoponcontainer && sudo make down_prod"

      - name: Git pull main
        run: ssh yandex-cloud-test-stand "cd ~/projects/my_eshoponcontainer && git pull origin main"

      - name: Pull latest docker images
        run: ssh yandex-cloud-test-stand "cd ~/projects/my_eshoponcontainer && sudo make dpull"

      - name: Docker prune
        run: ssh yandex-cloud-test-stand "cd ~/projects/my_eshoponcontainer && sudo docker system prune -f"

      - name: test_app alembic upgrade head
        if: steps.changes.outputs.test_app_migrations_files == 'true'
        run: ssh yandex-cloud-test-stand "cd ~/projects/my_eshoponcontainer && sudo make test_app_alembic_upgrade_head"

      - name: user_identity alembic upgrade head
        if: steps.changes.outputs.user_identity_migrations_files == 'true'
        run: ssh yandex-cloud-test-stand "cd ~/projects/my_eshoponcontainer && sudo make user_identity_alembic_upgrade_head"

      - name: basket alembic upgrade head
        if: steps.changes.outputs.basket_migrations_files == 'true'
        run: ssh yandex-cloud-test-stand "cd ~/projects/my_eshoponcontainer && sudo make basket_upgrade_alembic_head"

      - name: catalog alembic upgrade head
        if: steps.changes.outputs.catalog_migrations_files == 'true'
        run: ssh yandex-cloud-test-stand "cd ~/projects/my_eshoponcontainer && sudo make catalog_upgrade_alembic_head"

      - name: Start server
        run: ssh yandex-cloud-test-stand "cd ~/projects/my_eshoponcontainer && sudo make up_prod"
