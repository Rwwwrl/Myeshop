name: "eshop ci"

on:
  pull_request:
  push:
    branches: ["main"]

env:
  WORK_BRANCH_NAME: main

jobs:
  run_flake8_linter:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: checkout to repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: setup linter
        run: pip install -r deploy/ci/linter/flake8_requirements.txt
      - name: run linter
        run: flake8 --config=setup.cfg $(git diff origin/${{ github.event.pull_request.base.ref }} --name-only --diff-filter=d | grep -E '.+\.py$')

  run_tests:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for tests
        uses: docker/build-push-action@v5
        with:
          load: true
          push: false
          target: build_for_run_pytest
          tags: web_app:tests

      - name: Run pytest_contract_usage
        uses: addnab/docker-run-action@v3
        with:
          image: web_app:tests
          run: pytest -c pytest.ini -m cqrs_contract_usage

      - name: Run pytest
        uses: addnab/docker-run-action@v3
        with:
          image: web_app:tests
          run: pytest -c pytest.ini -m "not cqrs_contract_usage"

  build_and_push_to_dockerhub:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    env:
      LAST_GIT_COMMIT_SHA: ${{ github.event.head_commit.id }}

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACESS_TOKEN_FOR_CI_CD }}

      - name: Build and push to docker hub web app
        uses: docker/build-push-action@v5
        with:
          push: true
          target: build_for_prod
          tags: >
            rwwwrl/myeshop_web_app:${{ env.WORK_BRANCH_NAME }}_${{ env.LAST_GIT_COMMIT_SHA }} ,
            rwwwrl/myeshop_web_app:${{ env.WORK_BRANCH_NAME }}_latest

      - name: Build and push to docker hub prometheus
        uses: docker/build-push-action@v5
        with:
          context: "{{ defaultContext }}:deploy/prometheus"
          push: true
          tags: rwwwrl/myeshop_prometheus:${{ env.WORK_BRANCH_NAME }}_latest

  pull_main_latest_and_restart_server_on_test_machine:
    needs: build_and_push_to_dockerhub
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

    steps:
      - name: Setup ssh
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY_TO_YANDEX_CLOUD_VM_TEST_STAND }}" > ~/.ssh/yandex-cloud-test-stand.key
          chmod 600 ~/.ssh/yandex-cloud-test-stand.key
          cat >>~/.ssh/config <<END
          Host yandex-cloud-test-stand
            HostName ${{ secrets.YANDEX_CLOUD_VM_TEST_STAND_PUBLIC_IP }}
            User ${{ secrets.YANDEX_CLOUD_VM_TEST_STAND_USER_USERNAME }}
            IdentityFile ~/.ssh/yandex-cloud-test-stand.key
            StrictHostKeyChecking no
          END

      # нужен для работы dorny/paths-filter@v3
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            docker_compose_prod_yaml:
              - 'docker-compose.prod.yml'
            migrations_files:
              - 'eshop/migrations/versions/*.py'

      - name: Stop current running server
        run: ssh yandex-cloud-test-stand "cd ~/projects/my_eshoponcontainer && sudo docker-compose -f docker-compose.prod.yml down"

      - name: Git pull main
        if: steps.changes.outputs.docker_compose_prod_yaml == 'true'
        run: ssh yandex-cloud-test-stand "cd ~/projects/my_eshoponcontainer && git pull origin main"

      - name: Pull latest docker images
        run: ssh yandex-cloud-test-stand "cd ~/projects/my_eshoponcontainer && sudo docker-compose -f docker-compose.prod.yml pull"

      - name: Alembic upgrade head
        if: steps.changes.outputs.migrations_files == 'true'
        run: ssh yandex-cloud-test-stand "cd ~/projects/my_eshoponcontainer && sudo docker-compose -f docker-compose.prod.yml run web_app alembic upgrade head"

      - name: Start server
        run: ssh yandex-cloud-test-stand "cd ~/projects/my_eshoponcontainer && sudo docker-compose -f docker-compose.prod.yml up -d"
